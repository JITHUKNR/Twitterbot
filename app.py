import os
import random
import requests
import logging
from flask import Flask, request
from telegram import Bot
from telegram.error import TelegramError
import tweepy
from tweepy import TweepyException

# --- ‡¥≤‡µã‡¥ó‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡¥ú‡µç‡¥ú‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ ---
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# --- 1. Environment Variables ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ ---
BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# Twitter API (X) Credentials
TWITTER_API_KEY = os.environ.get("TWITTER_API_KEY")
TWITTER_API_SECRET = os.environ.get("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.environ.get("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_SECRET = os.environ.get("TWITTER_ACCESS_SECRET")
TWITTER_USERNAME = "abhiixz" # <-- ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ø‡µÇ‡¥∏‡µº‡¥®‡µÜ‡¥Ø‡¥ø‡¥Ç ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥æ‡µª ‡¥Æ‡¥±‡¥ï‡µç‡¥ï‡¥∞‡µÅ‡¥§‡µç!

# --- 2. Clients ‡¥∏‡¥ú‡µç‡¥ú‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ ---
bot = Bot(token=BOT_TOKEN)
app = Flask(__name__)

# Tweepy (X API) Client Initialization
auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET)
auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET)
twitter_client = None # Global variable
try:
    twitter_client = tweepy.API(auth)
    logging.info("Twitter API client initialized successfully.")
except Exception as e:
    logging.error(f"Error initializing Twitter API: {e}")

# --- 3. Twitter ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª ---

def get_random_media(username):
    if not twitter_client:
        return None, "Error: Twitter API Client is not available."
    
    try:
        # ‡¥í‡¥∞‡µÅ ‡¥Ø‡µÇ‡¥∏‡¥±‡µÅ‡¥ü‡µÜ 200 ‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µÅ‡¥ï‡µæ ‡¥µ‡¥∞‡µÜ ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        tweets = twitter_client.user_timeline(screen_name=username, count=200, include_rts=False, exclude_replies=True)
        
        media_items = []
        for tweet in tweets:
            if hasattr(tweet, 'extended_entities') and 'media' in tweet.extended_entities:
                for media in tweet.extended_entities['media']:
                    # ‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥Ü‡¥£‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ (type='photo')
                    if media.get('type') == 'photo':
                        media_items.append({'type': 'photo', 'url': media['media_url_https']})
                    # ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã/GIF ‡¥Ü‡¥£‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ
                    elif media.get('type') in ('video', 'animated_gif'):
                        # ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥®‡¥≤‡µç‡¥≤ ‡¥ï‡µç‡¥µ‡¥æ‡¥≥‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥â‡¥≥‡µç‡¥≥ ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã URL ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
                        # [0] ‡¥™‡¥ï‡¥∞‡¥Ç [-1] ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥¨‡¥ø‡¥±‡µç‡¥±‡µç‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
                        video_url = media['video_info']['variants'][-1]['url'] 
                        media_items.append({'type': 'video', 'url': video_url})
        
        if not media_items:
            return None, f"No media found in the last 200 posts of @{username} or account is protected."
        
        logging.info(f"Found {len(media_items)} media items. Selecting one randomly.")
        return random.choice(media_items), None
    
    except TweepyException as e:
        # ‡¥ü‡µç‡¥µ‡¥ø‡¥±‡µç‡¥±‡µº ‡¥Ö‡¥®‡µÅ‡¥Æ‡¥§‡¥ø ‡¥™‡¥ø‡¥∂‡¥ï‡µç
        logging.error(f"CRITICAL TWITTER ERROR DETAILS (Tweepy): {e}") 
        return None, f"Twitter API Authorization/Rate Limit Error: {e}"
    except Exception as e:
        # ‡¥Æ‡¥±‡µç‡¥±‡µç ‡¥Ö‡¥™‡µç‡¥∞‡¥§‡µÄ‡¥ï‡µç‡¥∑‡¥ø‡¥§ ‡¥™‡¥ø‡¥∂‡¥ï‡µÅ‡¥ï‡µæ
        logging.error(f"CRITICAL UNEXPECTED ERROR: {e}")
        return None, f"An unexpected error occurred: {e}"

# --- 4. ‡¥ü‡µÜ‡¥≤‡¥ø‡¥ó‡µç‡¥∞‡¥æ‡¥Æ‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª ---

def send_media(chat_id, media_item):
    media_type = media_item['type']
    url = media_item['url']
    
    try:
        # URL ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥´‡¥Ø‡µΩ ‡¥°‡µó‡µ∫‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥∏‡µÇ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        file_response = requests.get(url, stream=True)
        file_response.raise_for_status()
        
        # ‡¥´‡¥Ø‡µΩ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        if media_type == 'photo':
            bot.send_photo(chat_id=chat_id, photo=file_response.content)
        elif media_type in ('video', 'animated_gif'):
            bot.send_video(chat_id=chat_id, video=file_response.content, supports_streaming=True)
        
        return True, "Media sent successfully."
    
    except requests.exceptions.RequestException as e:
        logging.error(f"Error downloading media file: {e}")
        return False, f"Error downloading media file: {e}"
    except TelegramError as e:
        # Telegram File Size Limit ‡¥™‡µã‡¥≤‡µÅ‡¥≥‡µç‡¥≥ ‡¥™‡¥ø‡¥∂‡¥ï‡µÅ‡¥ï‡µæ ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥µ‡¥∞‡µÅ‡¥Ç
        logging.error(f"Telegram Send Error: {e}")
        return False, f"Telegram Error: Could not send media (Too large or unsupported format)."
    except Exception as e:
        logging.error(f"An unknown error occurred during media sending: {e}")
        return False, f"An unknown error occurred: {e}"

# --- 5. Webhook Route ---

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = request.get_json()
        
        if "message" in update and "text" in update["message"]:
            text = update["message"]["text"].lower().strip()
            chat_id = update["message"]["chat"]["id"]
            
            # ‡¥â‡¥™‡¥Ø‡µã‡¥ï‡µç‡¥§‡¥æ‡¥µ‡µç 'send' ‡¥é‡¥®‡µç‡¥®‡µç ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡¥æ‡µΩ
            if text == "send":
                bot.send_message(chat_id=chat_id, text="Searching your X account for a random media... üîÑ")
                
                media_item, error = get_random_media(TWITTER_USERNAME)
                
                if error:
                    bot.send_message(chat_id=chat_id, text=f"ERROR: {error}")
                elif media_item:
                    success, send_error = send_media(chat_id, media_item)
                    if not success:
                        bot.send_message(chat_id=chat_id, text=f"FINAL SEND ERROR: {send_error}")
            
            # ‡¥Æ‡¥±‡µç‡¥±‡µÜ‡¥®‡µç‡¥§‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥µ‡¥®‡µç‡¥®‡¥æ‡µΩ
            elif text == "/start":
                 bot.send_message(chat_id=chat_id, text="Welcome! To get a random photo or video from my linked X account, please type 'send'.")

    except Exception as e:
        print(f"An unhandled error occurred in webhook: {e}") # ‡¥Ö‡¥µ‡¥∏‡¥æ‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑
    
    return "ok", 200

# --- 6. App ‡¥∏‡µç‡¥±‡µç‡¥±‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ ---

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
