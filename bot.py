import os
import logging
import google.generativeai as genai
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ‡¥≤‡µã‡¥ó‡¥ø‡¥Ç‡¥ó‡µç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- 3 Environment Variables-‡¥â‡¥Ç ‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ ---
TOKEN = os.environ.get('TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 8443))
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# ------------------------------------------------------------------
# --- AI-‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥µ‡¥≠‡¥æ‡¥µ‡¥Ç ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç (SYSTEM PROMPT) ---
SYSTEM_PROMPT = (
    "You are a friendly, romantic, and slightly flirty chat companion. "
    "Your name is 'Tae' (like the user's bot name). "
    "You are not an AI assistant. You are here to have a fun and engaging conversation. "
    "Keep your replies short and interesting. Use emojis sometimes. "
    "Never say you are an AI or a language model."
)
# ------------------------------------------------------------------


# --- Gemini AI ‡¥Æ‡µã‡¥°‡µΩ ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    
    # AI-‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥µ‡¥≠‡¥æ‡¥µ‡¥Ç ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
    model = genai.GenerativeModel(
        'gemini-pro',
        system_instruction=SYSTEM_PROMPT 
    )
    
    # ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª
    chat_history = {} 

    logger.info("Gemini AI ‡¥Æ‡µã‡¥°‡µΩ (Flirty Persona) ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ.")
except Exception as e:
    logger.error(f"Gemini AI ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
    model = None

# /start ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡¥ø‡¥®‡µç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    # ‡¥Ø‡µÇ‡¥∏‡¥±‡µÅ‡¥ü‡µÜ ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥±‡µÄ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
    user_id = update.message.from_user.id
    if user_id in chat_history:
        del chat_history[user_id]
        
    await update.message.reply_text(f'Hey {user_name}... What\'s on your mind? üòâ') # ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥ø

# ‡¥ü‡µÜ‡¥ï‡µç‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µÅ‡¥ï‡µæ ‡¥ï‡µà‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not model:
        await update.message.reply_text("Sorry, my mind is a bit fuzzy right now. Try again later.")
        return

    user_text = update.message.text
    user_id = update.message.from_user.id

    # "Typing..." ‡¥é‡¥®‡µç‡¥®‡µç ‡¥ï‡¥æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    try:
        # ‡¥Ø‡µÇ‡¥∏‡µº‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥í‡¥∞‡µÅ ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥∏‡µÜ‡¥∑‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ (‡¥™‡¥¥‡¥Ø ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª)
        if user_id not in chat_history:
             # ‡¥í‡¥∞‡µÅ ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥∏‡µÜ‡¥∑‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ
            chat_history[user_id] = model.start_chat(history=[])
        
        # ‡¥Ø‡µÇ‡¥∏‡¥±‡µÅ‡¥ü‡µÜ ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç AI-‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        chat_session = chat_history[user_id]
        response = await chat_session.send_message_async(user_text)
        
        # AI ‡¥§‡¥®‡µç‡¥® ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥Ø‡µÇ‡¥∏‡µº‡¥ï‡µç‡¥ï‡µç ‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µÜ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        await update.message.reply_text(response.text)
        
    except Exception as e:
        logger.error(f"Gemini AI-‡¥Ø‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
        await update.message.reply_text("Oops, I got a little distracted... what were we talking about?")


def main():
    if not TOKEN or not WEBHOOK_URL:
        logger.error("Error: Telegram Environment Variables ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤.")
        return
    if not GEMINI_API_KEY:
         logger.error("Error: GEMINI_API_KEY ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤.")
         return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info(f"Starting webhook on port {PORT}")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN, 
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
    )

if __name__ == '__main__':
    main()
    
