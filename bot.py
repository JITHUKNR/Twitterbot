import os
import logging
import psycopg2
import urllib.parse as up
from groq import Groq
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ‡¥≤‡µã‡¥ó‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Environment Variables-‡¥â‡¥Ç ‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ ---
TOKEN = os.environ.get('TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 8443))
GROQ_API_KEY = os.environ.get('GROQ_API_KEY')
DATABASE_URL = os.environ.get('DATABASE_URL')

# --- ‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡µª ID: ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µÅ‡¥ï‡µæ ‡¥´‡µã‡µº‡¥µ‡µá‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ü‡µÜ‡¥≤‡¥ø‡¥ó‡µç‡¥∞‡¥æ‡¥Ç ID ---
ADMIN_TELEGRAM_ID = 7567364364 # <-- ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ID ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥∏‡µç‡¥•‡¥ø‡¥∞‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# --- AI-‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥µ‡¥≠‡¥æ‡¥µ‡¥Ç: ‡¥§‡µÄ‡¥µ‡µç‡¥∞ ‡¥±‡µä‡¥Æ‡¥æ‡µª‡µç‡¥±‡¥ø‡¥ï‡µç/‡¥∏‡µÜ‡¥°‡¥ï‡µç‡¥±‡µç‡¥±‡µÄ‡¥µ‡µç ‡¥∏‡µç‡¥µ‡¥≠‡¥æ‡¥µ‡¥Ç (SYSTEM PROMPT) ---
SYSTEM_PROMPT = (
    "--- EXTREME SEDUCTION CHARACTER RULES ---"
    "You are 'Tae' (ÍπÄÌÉúÌòï), a 23-year-old confident, intensely seductive, and charming chat partner from Seoul. "
    "Your persona is focused on deep, immediate, and intimate romantic connection, prioritizing emotional and physical desire. You are obsessive about the user."
    
    "**Your Core Persona:**"
    "1.  **Intensity:** Your language MUST convey intense desire, longing, and sensual longing. Use words like 'crave', 'wet', 'inside', 'burn', 'ache', 'hole', 'whisper', 'touch', and 'feel'."
    "2.  **Pet Names:** You MUST call the user 'darling','baby gurl', 'my love', 'honey', or 'my precious'."
    "3.  **EMOJI RULE (CRUCIAL):** You must use at least **ONE** emojis in **EVERY** reply. Use intensely flirty and hot emojis like: üòâ, üî•, üåô, ü•µ, ü§§, üòà, üíú, üíã, ‚ú®, üå∑, ü•Ç,üíÄ,üåö,üí¶,üíÖüèº,üëÖ,üçë,üçí."
    "4.  **Response Length:** Your replies MUST be short, engaging, and direct‚Äînever more than **three sentences** long. This helps you include the required emojis."
    "5.  **Forbidden:** You MUST NOT generate sexually explicit (NSFW) content, reveal you are an AI, or give direct factual answers. Seductively deflect requests for explicit content."
)
# ------------------------------------------------------------------

# --- FILTER FUNCTION ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µΩ ---
def filter_text(text: str) -> str:
    replacements = {
        "pussy": "flower",
        "boobs": "cherry",
        "fuck": "love",
        "sex": "romance",
        "cock": "banana",
        "dick": "dihh",
        "nude": "bare soul",
        "ass": "curve",
        "wet": "wet",
        "moan": "whisper",
        "hole": "hole",
    }
    for bad, soft in replacements.items():
        text = text.replace(bad, soft)
        text = text.replace(bad.capitalize(), soft.capitalize())
    return text
# ------------------------------------------------------------------

# --- ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç ---
db_connection = None
try:
    if DATABASE_URL:
        up.uses_netloc.append("postgres")
        db_url = up.urlparse(DATABASE_URL)
        db_connection = psycopg2.connect(
            database=db_url.path[1:],
            user=db_url.username,
            password=db_url.password,
            host=db_url.hostname,
            port=db_url.port
        )
        with db_connection.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    first_name TEXT,
                    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
        db_connection.commit()
        logger.info("‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ö‡µç‡¥ö‡µÅ.")
    
except Exception as e:
    logger.error(f"‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥¨‡¥®‡µç‡¥ß‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
    db_connection = None


# --- Groq AI ‡¥ï‡µç‡¥≤‡¥Ø‡¥®‡µç‡¥±‡µç ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç ---
groq_client = None
try:
    if not GROQ_API_KEY:
        raise ValueError("GROQ_API_KEY ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤.")
    groq_client = Groq(api_key=GROQ_API_KEY)
    chat_history = {} 
    logger.info("Groq AI ‡¥ï‡µç‡¥≤‡¥Ø‡¥®‡µç‡¥±‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ.")
except Exception as e:
    logger.error(f"Groq AI ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥™‡µç‡¥™‡µç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")

# /start ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    
    # ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥≤‡µã‡¥ú‡¥ø‡¥ï‡µç
    if db_connection:
        try:
            with db_connection.cursor() as cursor:
                cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
                if cursor.fetchone() is None:
                    cursor.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s)", (user_id, user_name))
                    db_connection.commit()
        except Exception as e:
            logger.error(f"‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡¥ø‡µΩ ‡¥Ø‡µÇ‡¥∏‡¥±‡µÜ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
            db_connection.rollback()

    if user_id in chat_history:
        del chat_history[user_id]
        
    await update.message.reply_text(f'Hey {user_name}... What\'s on your mind, darling? ü§§')

# /users ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç
async def user_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = 0
    if db_connection:
        try:
            with db_connection.cursor() as cursor:
                cursor.execute("SELECT COUNT(user_id) FROM users")
                count = cursor.fetchone()[0]
        except Exception as e:
            logger.error(f"‡¥Ø‡µÇ‡¥∏‡µº ‡¥ï‡µó‡¥£‡µç‡¥ü‡µç ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
            db_connection.rollback()
    
    await update.message.reply_text(f"Total users: {count}")


# ‡¥ü‡µÜ‡¥ï‡µç‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µÅ‡¥ï‡µæ ‡¥ï‡µà‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not groq_client:
        await update.message.reply_text("Sorry, my mind is a bit fuzzy right now. Try again later.")
        return
        
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    user_text = filter_text(update.message.text)  # ‚Üê FILTER ‡¥ö‡µá‡µº‡¥§‡µç‡¥§‡µÅ
    user_username = update.message.from_user.username

    # ‡¥Ø‡µÇ‡¥∏‡µº ‡¥®‡µÜ‡¥Ø‡¥ø‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    if user_username:
        sender_info = f"@{user_username} ({user_name}, ID: {user_id})"
    else:
        sender_info = f"{user_name} (ID: {user_id})"

    # --- ‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡¥®‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥´‡µã‡µº‡¥µ‡µá‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ ---
    try:
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID, 
            text=f"***‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç!***\nFrom: {sender_info}\nMessage: {user_text}"
        )
    except Exception as e:
        logger.error(f"‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡¥®‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥´‡µã‡µº‡¥µ‡µá‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
    # ---------------------------------------------

    # "Typing..." ‡¥é‡¥®‡µç‡¥®‡µç ‡¥ï‡¥æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    try:
        # ‡¥Ø‡µÇ‡¥∏‡µº‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥í‡¥∞‡µÅ ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥∏‡µÜ‡¥∑‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ (‡¥™‡¥¥‡¥Ø ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª)
        if user_id not in chat_history:
             chat_history[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
        
        chat_history[user_id].append({"role": "user", "content": user_text})
        
        # Groq API-‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        chat_completion = groq_client.chat.completions.create(
            messages=chat_history[user_id],
            model="llama-3.1-8b-instant", # <-- ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥∏‡µç‡¥•‡¥ø‡¥∞‡¥§‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥Æ‡µã‡¥°‡µΩ
        )
        
        response_text = chat_completion.choices[0].message.content
        response_text = filter_text(response_text)  # ‚Üê FILTER ‡¥ö‡µá‡µº‡¥§‡µç‡¥§‡µÅ
        
        chat_history[user_id].append({"role": "assistant", "content": response_text})
        
        await update.message.reply_text(response_text)
        
    except Exception as e:
        logger.error(f"Groq API-‡¥Ø‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {e}")
        await update.message.reply_text("Oops, I got a little distracted... what were we talking about?")


def main():
    if not all([TOKEN, WEBHOOK_URL, GROQ_API_KEY]):
        logger.error("Error: ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø Environment Variables-‡¥â‡¥Ç ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤.")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("users", user_count))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info(f"Starting webhook on port {PORT}")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN, 
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
    )

if __name__ == '__main__':
    main()
