import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pymongo import MongoClient
from groq import Groq

# -----------------
# 1. API ‡¥ï‡µÄ‡¥ï‡µæ ‡¥∏‡¥ú‡µç‡¥ú‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï (API Keys Setup)
# -----------------
# ‡¥à ‡¥µ‡µá‡¥∞‡¥ø‡¥Ø‡¥¨‡¥ø‡¥≥‡µÅ‡¥ï‡µæ Render ‡¥é‡µª‡¥µ‡¥Ø‡µã‡µ∫‡¥Æ‡µÜ‡µª‡µç‡¥±‡µç ‡¥µ‡µá‡¥∞‡¥ø‡¥Ø‡¥¨‡¥ø‡¥≥‡¥ø‡µΩ ‡¥∏‡¥ú‡µç‡¥ú‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥£‡¥Ç (Render Environment Variables)
BOT_TOKEN = os.environ.get("BOT_TOKEN")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
MONGO_URI = os.environ.get("MONGO_URI") # DATABASE_URL ‡¥®‡µç ‡¥™‡¥ï‡¥∞‡¥Ç MONGO_URI ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID"))

# -----------------
# 2. ‡¥≤‡µã‡¥ó‡¥ø‡¥Ç‡¥ó‡µç ‡¥ï‡µã‡µ∫‡¥´‡¥ø‡¥ó‡¥±‡µá‡¥∑‡µª (Logging Configuration)
# -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# -----------------
# 3. ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡¥®‡µÅ‡¥Ç AI ‡¥ï‡µç‡¥≤‡µà‡µª‡µç‡¥±‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç (DB Connection & AI Clients)
# -----------------
groq_client = Groq(api_key=GROQ_API_KEY)
mongo_client = None
db = None
conversations_collection = None
users_collection = None

def establish_db_connection():
    """MongoDB ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡µª ‡¥∏‡µç‡¥•‡¥æ‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    global mongo_client, db, conversations_collection, users_collection
    try:
        if MONGO_URI:
            mongo_client = MongoClient(MONGO_URI)
            db = mongo_client.get_database("telegram_bot_db")
            conversations_collection = db.get_collection("conversations")
            users_collection = db.get_collection("users")
            logger.info("Successfully connected to MongoDB.")
        else:
            logger.error("MONGO_URI is not set. Database connection failed.")
    except Exception as e:
        logger.error(f"MongoDB connection error: {e}")

# -----------------
# 4. ‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡¥®‡µÅ‡¥ï‡µæ (Utility Functions)
# -----------------
def get_user_data(user_id):
    """‡¥í‡¥∞‡µÅ ‡¥Ø‡µÇ‡¥∏‡¥±‡¥ø‡µª‡µç‡¥±‡µÜ ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥∏‡µç‡¥±‡µç‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    if users_collection:
        return users_collection.find_one({"user_id": user_id})
    return {"chat_history": []}

def update_user_data(user_id, data):
    """‡¥Ø‡µÇ‡¥∏‡¥±‡¥ø‡µª‡µç‡¥±‡µÜ ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥∏‡µç‡¥±‡µç‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥Ö‡¥™‡µç‡¥°‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    if users_collection:
        users_collection.update_one(
            {"user_id": user_id}, {"$set": data}, upsert=True
        )

def get_conversation_history(user_id):
    """‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    if conversations_collection:
        conversation_data = conversations_collection.find_one({"user_id": user_id})
        return conversation_data.get("chat_history", []) if conversation_data else []
    return []

def save_conversation_history(user_id, chat_history):
    """‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡¥ø‡µΩ ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    if conversations_collection:
        conversations_collection.update_one(
            {"user_id": user_id}, {"$set": {"chat_history": chat_history}}, upsert=True
        )

def get_allowed_status(user_id):
    """‡¥í‡¥∞‡µÅ ‡¥Ø‡µÇ‡¥∏‡µº‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Ö‡¥®‡µÅ‡¥µ‡¥æ‡¥¶‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_data = users_collection.find_one({"user_id": user_id})
    return user_data.get("allow_media", True) if user_data else True

# -----------------
# 5. ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç ‡¥π‡¥æ‡µª‡¥°‡µç‡¥≤‡¥±‡µÅ‡¥ï‡µæ (Command Handlers)
# -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£‡¥Ç."""
    user_id = update.effective_user.id
    update_user_data(user_id, {"user_id": user_id, "allow_media": True, "is_admin": user_id == ADMIN_USER_ID})
    
    await update.message.reply_text(
        "üëã ‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ AI ‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡µç‡¥±‡µç ‡¥Ü‡¥£‡µç. ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥®‡µç‡¥®‡µã‡¥ü‡µç ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç.\n\n"
        "‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥∏‡¥Ç‡¥≠‡¥æ‡¥∑‡¥£‡¥Ç ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡¥æ‡µª /new ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.\n"
        "‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡¥æ‡µª /stopmedia ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
    )

async def new_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/new ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç - ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥∏‡¥Ç‡¥≠‡¥æ‡¥∑‡¥£‡¥Ç ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_id = update.effective_user.id
    save_conversation_history(user_id, [])
    await update.message.reply_text("‚úÖ ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥∏‡¥Ç‡¥≠‡¥æ‡¥∑‡¥£‡¥Ç ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡¥ø‡¥™‡µç‡¥™‡µã‡µæ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç.")

async def clear_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/clearmedia ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç - ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥Ö‡¥®‡µÅ‡¥µ‡¥æ‡¥¶‡¥Ç ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_id = update.effective_user.id
    update_user_data(user_id, {"allow_media": True}) # ‡¥á‡¥§‡µç ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Ç ‡¥™‡¥∞‡¥ø‡¥π‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç True ‡¥Ü‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    await update.message.reply_text("üö´ ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥§‡¥æ‡µΩ‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥ø‡¥ï‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡¥ø‡¥µ‡µÜ‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥§‡µÅ‡¥ü‡¥∞‡¥æ‡¥Ç.")

async def stop_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/stopmedia ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç - ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_id = update.effective_user.id
    update_user_data(user_id, {"allow_media": False})
    await update.message.reply_text("üö´ ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥á‡¥®‡¥ø ‡¥Æ‡µÅ‡¥§‡µΩ AI ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥ï‡µÇ.")

async def allow_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/allowmedia ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç - ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥™‡µÅ‡¥®‡¥∞‡¥æ‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_id = update.effective_user.id
    update_user_data(user_id, {"allow_media": True})
    await update.message.reply_text("‚úÖ ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥™‡µÅ‡¥®‡¥∞‡¥æ‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.")

# -----------------
# 6. ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥π‡¥æ‡µª‡¥°‡µç‡¥≤‡µº (Message Handler - AI Chat Logic)
# -----------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¥ü‡µÜ‡¥ï‡µç‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µÅ‡¥ï‡µæ ‡¥∏‡µç‡¥µ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ö‡µç‡¥ö‡µç AI ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    user_id = update.effective_user.id
    
    # ‡¥Ø‡µÇ‡¥∏‡µº ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    if not get_allowed_status(user_id) and update.message.media_group_id:
        await update.message.reply_text(
            "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡¥ø‡¥µ‡µÜ‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡¥æ‡¥£‡µç (/stopmedia). ‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø‡¥æ ‡¥´‡¥Ø‡¥≤‡µÅ‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Ö‡¥®‡µÅ‡¥µ‡¥æ‡¥¶‡¥Ç ‡¥®‡µΩ‡¥ï‡¥æ‡µª /allowmedia ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
        )
        return

    # ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    chat_history = get_conversation_history(user_id)
    
    # ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥Ø‡µÇ‡¥∏‡µº ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    user_message = {"role": "user", "content": update.message.text}
    chat_history.append(user_message)

    # Groq API ‡¥ï‡µã‡µæ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
    try:
        response = groq_client.chat.completions.create(
            messages=chat_history,
            model="llama3-8b-8192", # ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥Æ‡µã‡¥°‡µΩ
            temperature=0.7,
        )
        ai_response = response.choices[0].message.content
        
        # AI ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£‡¥Ç ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        ai_message = {"role": "assistant", "content": ai_response}
        chat_history.append(ai_message)

        # ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡¥ø‡µΩ ‡¥π‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥±‡¥ø ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
        save_conversation_history(user_id, chat_history)

        # ‡¥Ø‡µÇ‡¥∏‡µº‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        await update.message.reply_text(ai_response)
        
    except Exception as e:
        logger.error(f"Groq API Error: {e}")
        await update.message.reply_text("‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, AI ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥í‡¥∞‡µÅ ‡¥™‡¥ø‡¥¥‡¥µ‡µç ‡¥∏‡¥Ç‡¥≠‡¥µ‡¥ø‡¥ö‡µç‡¥ö‡µÅ.")
        
# -----------------
# 7. ‡¥Æ‡µÜ‡¥Ø‡¥ø‡µª ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª (Main Function)
# -----------------
def main() -> None:
    """‡¥¨‡µã‡¥ü‡µç‡¥ü‡¥ø‡¥®‡µÜ ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    establish_db_connection()
    
    application = Application.builder().token(BOT_TOKEN).build()

    # ‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µç ‡¥π‡¥æ‡µª‡¥°‡µç‡¥≤‡¥±‡µÅ‡¥ï‡µæ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new", new_conversation))
    application.add_handler(CommandHandler("clearmedia", clear_media))
    application.add_handler(CommandHandler("stopmedia", stop_media))
    application.add_handler(CommandHandler("allowmedia", allow_media))

    # ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥π‡¥æ‡µª‡¥°‡µç‡¥≤‡µº
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥®‡µÅ
    application.run_polling(read_timeout=35)

if __name__ == "__main__":
    main()
